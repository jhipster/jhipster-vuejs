<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { element, by, ElementFinder } from 'protractor';

import { waitUntilCount, waitUntilDisplayed } from '<% if (clientRootFolder && !skipUiGrouping) { %>../<% } %>../../util/utils';

export default class <%= entityClass %>ComponentsPage {
  async isSaveButtonPresent() {
    const saveButton = await element(by.id('save-entity'));
    return await saveButton.isPresent();
  }

  async save() {
    const saveButton = await element(by.id('save-entity'));
    await saveButton.click();
  }

  async cancel() {
    const cancelButton = await element(by.id('cancel-save'));
    await cancelButton.click();
  }

  async getCreateButton() {
    return await element(by.id('jh-create-entity'));
  }

  async clickOnCreateButton() {
    await element(by.id('jh-create-entity')).click();
  }

  async getDetailButtons() {
    return await element.all(by.css('.btn-info.details'));
  }

  async clickOnLastDetailsButton() {
    await element.all(by.css('.btn-info.details')).last().click();
  }

  async getEditButtons() {
    return await element.all(by.css('.btn-primary.edit'));
  }

  async clickOnLastEditButton() {
    await element.all(by.css('.btn-primary.edit')).last().click();
  }

  async getDeleteButtons() {
    return await element.all(by.css('div table .btn-danger'));
  }

  async clickOnLastDeleteButton() {
    await element.all(by.css('div table .btn-danger')).last().click();
  }

  async countDeleteButtons() {
    const deleteButtons = await element.all(by.css('div table .btn-danger'));
    return deleteButtons.length;
  }

  async getTitle() {
    return await element(by.id('<%= entityFileName %>-heading'));
  }

  async getFooter() {
    return await element(by.id('footer'));
  }

  async waitUntilLoaded() {
    await waitUntilDisplayed(element.all(by.css('div table .btn-danger')).first());
  }

  async waitUntilDeleteButtonsLength(length) {
    await waitUntilCount(element.all(by.css('div table .btn-danger')), length);
  }
}

export class <%= entityClass %>DeleteDialog {
  private dialogTitle: ElementFinder = element(by.id('<%= i18nKeyPrefix %>.delete.question'));
  private confirmButton = element(by.id('<%= jhiPrefixDashed %>-confirm-delete-<%= entityInstance %>'));

  getDialogTitle() {
    return this.dialogTitle;
  }

  async clickOnConfirmButton() {
    await this.confirmButton.click();
  }
}
