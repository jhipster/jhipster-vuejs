<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
/* tslint:disable no-unused-expression */
import { browser<% if ( fieldsContainInstant || fieldsContainZonedDateTime ) { %>, protractor<% } %>, element, by } from 'protractor';

import NavBarPage from './../../<%= entityParentPathAddition %>page-objects/navbar-page';
import SignInPage from './../../<%= entityParentPathAddition %>page-objects/signin-page';
import <%= entityClass %>ComponentsPage from './<%= entityFileName %>.page-object';
import { <%= entityClass %>DeleteDialog } from './<%= entityFileName %>.page-object';
import <%= entityClass %>UpdatePage from './<%= entityFileName%>-update.page-object';
import <%= entityClass %>DetailsPage from './<%= entityFileName%>-details.page-object';
import { waitUntilDisplayed, waitUntilHidden, getDangerToast, getInfoToast, getSuccessToast } from '../../<%= entityParentPathAddition %>util/utils';
<%_ if (fieldsContainBlobOrImage) { _%>
import path from 'path';
<%_ } _%>
<%_
let elementGetter = `getText()`;
let openBlockComment = ``;
let closeBlockComment = ``;
if (enableTranslation) {
    elementGetter = `getAttribute('jhiTranslate')`;
}
for (let relationship of relationships) {
    if (relationship.relationshipRequired) {
        openBlockComment = `/*`;
        closeBlockComment = `*/`;
        break;
    }
} _%>

const expect = chai.expect;

describe('<%= entityClass %> e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let <%= entityInstance %>UpdatePage: <%= entityClass %>UpdatePage;
  let <%= entityInstance %>DetailsPage: <%= entityClass %>DetailsPage;
  let <%= entityInstance %>ComponentsPage: <%= entityClass %>ComponentsPage;
  <%= openBlockComment %>let <%= entityInstance %>DeleteDialog: <%= entityClass %>DeleteDialog;<%= closeBlockComment %>
  <%_ if (fieldsContainBlobOrImage) { _%>
  const fileToUpload = '../../../../../<%= entityParentPathAddition %>main/webapp/content/images/logo-jhipster.png';
  const absolutePath = path.resolve(__dirname, fileToUpload);
  <%_ } _%>
  let nbButtonsBeforeCreate = 0;

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    <%_ if (authenticationType !== 'oauth2') { _%>
    await signInPage.waitUntilDisplayed();

    await signInPage.username.sendKeys('admin');
    await signInPage.password.sendKeys('admin');
    await signInPage.loginButton.click();
    await signInPage.waitUntilHidden();
    <%_ } else if (authenticationType === 'oauth2') { _%>
    await signInPage.loginWithOAuth('admin', 'admin');
    <%_ } _%>
    await waitUntilDisplayed(navBarPage.entityMenu);
  });

  it('should load <%= entityClassPlural %>', async () => {
    await navBarPage.getEntityPage('<%= entityStateName %>');
    <%= entityInstance %>ComponentsPage = new <%= entityClass %>ComponentsPage();
    const heading = await <%= entityInstance %>ComponentsPage.getTitle();
    await waitUntilDisplayed(heading);

    const footer = await <%= entityInstance %>ComponentsPage.getFooter();
    await waitUntilDisplayed(footer);
    
    expect(await heading.getText()).not.to.be.empty;
    nbButtonsBeforeCreate = await <%= entityInstance %>ComponentsPage.countDeleteButtons();
    
    // Bug-fix with Protractor.
    // force to recalculate in case of value is still 0
    if (nbButtonsBeforeCreate === 0) {
      nbButtonsBeforeCreate = await <%= entityInstance %>ComponentsPage.countDeleteButtons();
    }
  });

  it('should load create <%= entityClass %> page', async () => {
    await <%= entityInstance %>ComponentsPage.clickOnCreateButton();
    <%= entityInstance %>UpdatePage = new <%= entityClass %>UpdatePage();

    const heading = await <%= entityInstance %>UpdatePage.getPageTitle();
    await waitUntilDisplayed(heading);

    const footer = await <%= entityInstance %>UpdatePage.getFooter();
    await waitUntilDisplayed(footer);

    await waitUntilDisplayed(await <%= entityInstance %>UpdatePage.getSaveButton());

    <%_ if (enableTranslation) { _%>
    expect(await heading.getAttribute('id'))
      .to.match(/<%= i18nKeyPrefix %>.home.createOrEditLabel/);
    <%_ } else { _%>
    expect(await heading.getText())
      .to.match(/Create or edit a <%= entityClass %>/);
    <%_ } _%>
  });

 <%= openBlockComment %> it('should create and save <%= entityClassPlural %>', async () => {
    <%_ fields.forEach((field) => {
      const fieldName = field.fieldName;
      const fieldNameCapitalized = field.fieldNameCapitalized;
      const fieldType = field.fieldType;
      const fieldTypeBlobContent = field.fieldTypeBlobContent;
      const fieldIsEnum = field.fieldIsEnum;
    _%>

    <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('5');
    expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('5');

    <%_ } else if (fieldType === 'LocalDate') { _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('01-01-2001');
    expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('2001-01-01');

    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('01/01/2001' + protractor.Key.TAB + '02:30AM');
    expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.contain('2001-01-01T02:30');

    <%_ } else if (fieldType === 'Duration') { _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('PT12S');
    expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.contain('12');

    <%_ } else if (fieldType === 'Boolean') { _%>
    const selected<%= fieldNameCapitalized %> = await <%= entityInstance %>UpdatePage.isSelected<%= fieldNameCapitalized %>Input();
    if (selected<%= fieldNameCapitalized %>) {
      await <%= entityInstance %>UpdatePage.click<%= fieldNameCapitalized %>Input();
      expect(await <%= entityInstance %>UpdatePage.isSelected<%= fieldNameCapitalized %>Input()).to.be.false;
    } else {
      await <%= entityInstance %>UpdatePage.click<%= fieldNameCapitalized %>Input();
      expect(await <%= entityInstance %>UpdatePage.isSelected<%= fieldNameCapitalized %>Input()).to.be.true;
    }

    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent === 'text') { _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('<%= fieldName %>');
    expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.match(/<%= fieldName %>/);

    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input(absolutePath);

    <%_ } else if (fieldIsEnum) { _%>
    await <%= entityInstance %>UpdatePage.<%=fieldName %>SelectLastOption();

    <%_ } else if (fieldType === 'UUID'){ _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('64c99148-3908-465d-8c4a-e510e3ade974');
    expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.match(/64c99148-3908-465d-8c4a-e510e3ade974/);

    <%_ } else { _%>
    await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('<%= fieldName %>');
    expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.match(/<%= fieldName %>/);

    <%_ } _%>
    <%_ }); _%>
    <%_ relationships.forEach((relationship) => {
      const relationshipType = relationship.relationshipType;
      const ownerSide = relationship.ownerSide;
      const relationshipName = relationship.relationshipName; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
    // await <%= entityInstance %>UpdatePage.<%=relationshipName %>SelectLastOption();
    <%_ } else if ((relationshipType === 'many-to-many' && ownerSide === true)) { _%>
    // <%= entityInstance %>UpdatePage.<%=relationshipName %>SelectLastOption();
    <%_ } _%>
    <%_ }); _%>

    await <%= entityInstance %>UpdatePage.save();
    await waitUntilHidden(await <%= entityInstance %>UpdatePage.getSaveButton());
    expect(await <%= entityInstance %>UpdatePage.isSaveButtonPresent()).to.be.false;

    const toast = getSuccessToast();
    await waitUntilDisplayed(toast);
    // Success toast should appear
    expect(await toast.isPresent()).to.be.true;
    
    await <%= entityInstance %>ComponentsPage.waitUntilDeleteButtonsLength(nbButtonsBeforeCreate + 1);
    expect(await <%= entityInstance %>ComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1);
  });<%= closeBlockComment %>

  it('should load details <%= entityClass %> page and fetch data', async () => {
    await <%= entityInstance %>ComponentsPage.clickOnLastDetailsButton();
    <%= entityInstance %>DetailsPage = new <%= entityClass %>DetailsPage();

    const heading = await <%= entityInstance %>DetailsPage.getPageTitle();
    await waitUntilDisplayed(heading);

    const footer = await <%= entityInstance %>UpdatePage.getFooter();
    await waitUntilDisplayed(footer);
    
    await waitUntilDisplayed(await <%= entityInstance %>DetailsPage.getBackButton());
    expect(await heading.getText()).not.to.be.empty;

    const firstDetail = <%= entityInstance %>DetailsPage.getFirstDetail();
    expect(await firstDetail.getText()).not.to.be.empty;

    await <%= entityInstance %>DetailsPage.getBackButton().click();
    await <%= entityInstance %>ComponentsPage.waitUntilDeleteButtonsLength(nbButtonsBeforeCreate + 1);
  });

  it('should load edit <%= entityClass %> page and fetch data', async () => {
    await <%= entityInstance %>ComponentsPage.clickOnLastEditButton();
    const heading = await <%= entityInstance %>UpdatePage.getPageTitle();
    await waitUntilDisplayed(heading);

    const footer = await <%= entityInstance %>UpdatePage.getFooter();
    await waitUntilDisplayed(footer);

    await waitUntilDisplayed(await <%= entityInstance %>UpdatePage.getSaveButton());

    expect(await heading.getText()).not.to.be.empty;

    <%_ fields.forEach((field) => {
      const fieldName = field.fieldName;
      const fieldNameCapitalized = field.fieldNameCapitalized;
      const fieldType = field.fieldType;
      const fieldTypeBlobContent = field.fieldTypeBlobContent;
      const fieldIsEnum = field.fieldIsEnum;
    _%>
    <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
      await <%= entityInstance %>UpdatePage.clear<%= fieldNameCapitalized %>Input();
      await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('6');
      expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('6');

    <%_ } else if (fieldType === 'LocalDate') { _%>
      await <%= entityInstance %>UpdatePage.clear<%= fieldNameCapitalized %>Input();
      await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('01-01-2019');
      expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('2019-01-01');

    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
      await <%= entityInstance %>UpdatePage.clear<%= fieldNameCapitalized %>Input();
      await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('01/01/2019' + protractor.Key.TAB + '02:30AM');
      expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.contain('2019-01-01T02:30');

    <%_ } else if (fieldType === 'Duration') { _%>
      await <%= entityInstance %>UpdatePage.clear<%= fieldNameCapitalized %>Input();
      await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('PT14S');
      expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.contain('14');

    <%_ } else if (fieldType === 'Boolean') { _%>
      const selected<%= fieldNameCapitalized %> = await <%= entityInstance %>UpdatePage.isSelected<%= fieldNameCapitalized %>Input();
      if (selected<%= fieldNameCapitalized %>) {
      await <%= entityInstance %>UpdatePage.click<%= fieldNameCapitalized %>Input();
      expect(await <%= entityInstance %>UpdatePage.isSelected<%= fieldNameCapitalized %>Input()).to.be.false;
      } else {
      await <%= entityInstance %>UpdatePage.click<%= fieldNameCapitalized %>Input();
      expect(await <%= entityInstance %>UpdatePage.isSelected<%= fieldNameCapitalized %>Input()).to.be.true;
      }

    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent === 'text') { _%>
      await <%= entityInstance %>UpdatePage.clear<%= fieldNameCapitalized %>Input();
      await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('updated<%= fieldName %>');
      expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.match(/updated<%= fieldName %>/);

    <%_ } else if (fieldType === 'UUID'){ _%>
      await <%= entityInstance %>UpdatePage.clear<%= fieldNameCapitalized %>Input();
      await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('64c99148-3908-465d-8c4a-e510e3ade978');
      expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.match(/64c99148-3908-465d-8c4a-e510e3ade978/);

    <%_ } else if (!fieldIsEnum && !['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
      await <%= entityInstance %>UpdatePage.clear<%= fieldNameCapitalized %>Input();
      await <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('modified');
      expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.match(/modified/);

    <%_ } _%>
    <%_ }); _%>

    await <%= entityInstance %>UpdatePage.save();

    await waitUntilHidden(await <%= entityInstance %>UpdatePage.getSaveButton());

    expect(await <%= entityInstance %>UpdatePage.isSaveButtonPresent()).to.be.false;

    const toast = getInfoToast();
    await waitUntilDisplayed(toast);
    // Info toast should appear
    expect(await toast.isPresent()).to.be.true;
  });

  <%= openBlockComment %> it('should delete last <%= entityClass %>', async () => {
    await <%= entityInstance %>ComponentsPage.waitUntilLoaded();
    const nbButtonsBeforeDelete = await <%= entityInstance %>ComponentsPage.countDeleteButtons();
    await <%= entityInstance %>ComponentsPage.clickOnLastDeleteButton();

    const deleteModal = element(by.className('modal'));
    await waitUntilDisplayed(deleteModal);
    <%= entityInstance %>DeleteDialog = new <%= entityClass %>DeleteDialog();
    expect(await <%= entityInstance %>DeleteDialog.getDialogTitle().getAttribute('id')).to.match(/<%= i18nKeyPrefix %>.delete.question/);

    await <%= entityInstance %>DeleteDialog.clickOnConfirmButton();
    await waitUntilHidden(deleteModal);

    // Delete modal should disappear
    expect(await deleteModal.isDisplayed()).to.be.false;
    expect(await <%= entityInstance %>ComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);

    const toast = getDangerToast();

    // Danger toast should appear
    expect(await toast.isPresent()).to.be.true;
  });<%= closeBlockComment %>

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
