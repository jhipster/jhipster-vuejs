<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const tsKeyId = generateTestEntityId(pkType, prodDatabaseType);
_%>
/* tslint:disable max-line-length */
import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils';
import axios from 'axios';
import Router from 'vue-router';

import AlertService from '@/shared/alert/alert.service';
import * as config from '@/shared/config/config';
import <%= entityAngularName %>UpdateComponent from '@/entities/<%= entityFolderName %>/<%= entityFileName %>-update.vue';
import <%= entityAngularName %>Class from '@/entities/<%= entityFolderName %>/<%= entityFileName %>-update.component';
import <%= entityAngularName %>Service from '@/entities/<%= entityFolderName %>/<%= entityFileName %>.service';

<%_
    const importEntitiesSeen = [entityAngularName];
    for (idx in relationships) {
    const otherEntityAngularName = relationships[idx].otherEntityAngularName;
    const otherEntityFileName = relationships[idx].otherEntityFileName;
    const otherEntityFolderName = relationships[idx].otherEntityFileName;
    const otherEntityClientRootFolder = relationships[idx].otherEntityClientRootFolder;
    const otherEntityModelName = relationships[idx].otherEntityModelName;
_%>
  <% if (otherEntityAngularName === 'User' && authenticationType !== "oauth2") { %>
import UserService from '@/admin/user-management/user-management.service';
  <% } else if (otherEntityAngularName !== 'User' && !importEntitiesSeen.includes(otherEntityAngularName)) { %>
import <%= otherEntityAngularName %>Service from '@/entities/<%= otherEntityClientRootFolder %><%= otherEntityFolderName %>/<%= otherEntityFileName %>.service';
  <% } %>
<%_ importEntitiesSeen.push(otherEntityAngularName); } _%>

const localVue = createLocalVue();
const mockedAxios: any = axios;

config.initVueApp(localVue);
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>
const store = config.initVueXStore(localVue);
const router = new Router();
localVue.use(Router);
localVue.component('font-awesome-icon', {});

jest.mock('axios', () => ({
    post: jest.fn(),
    put: jest.fn()
}));

describe('Component Tests', () => {

  describe('<%= entityAngularName %> Management Update Component', () => {
    let wrapper: Wrapper<<%= entityAngularName %>Class>;
    let comp: <%= entityAngularName %>Class;

    beforeEach(() => {
      mockedAxios.post.mockReturnValue(Promise.resolve());
      mockedAxios.put.mockReturnValue(Promise.resolve());

      wrapper = shallowMount<<%= entityAngularName %>Class>(<%= entityAngularName %>UpdateComponent, {
        store,
        <%_ if (enableTranslation) { _%>
        i18n,
        <%_ } _%>
        localVue,
        router,
        provide: {
          alertService: () => new AlertService(store),
          <%= entityInstance %>Service: () => new <%= entityAngularName %>Service(),
          <%_
            const entitiesSeen = [entityAngularName];
            for (idx in relationships) {
            const otherEntityName = relationships[idx].otherEntityName;
            const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
            const otherEntityAngularName = relationships[idx].otherEntityAngularName;
            if (!(otherEntityAngularName === 'User' && authenticationType === "oauth2")) {
          _%>
          <%_ if (!entitiesSeen.includes(otherEntityAngularName)) { %>
          <%= otherEntityName %>Service: () => new <%= otherEntityAngularName %>Service(),
          <%_ } _%>
          <%_ entitiesSeen.push(otherEntityAngularName); } } _%>

        }
      });
      comp = wrapper.vm;
    });

    describe('save', () => {
      it('Should call update service on save for existing entity', async () => {
        // GIVEN
        const entity = {id:<%- tsKeyId %>};
        comp.<%= entityInstance %> = entity;
        mockedAxios.put.mockReturnValue(Promise.resolve({data: {}}));

        // WHEN
        comp.save();
        await comp.$nextTick();

        // THEN
        expect(mockedAxios.put).toHaveBeenCalledWith('api/<%= entityApiUrl %>', entity);
        expect(comp.isSaving).toEqual(false);
      });

      it('Should call create service on save for new entity', async () => {
        // GIVEN
        const entity = {};
        comp.<%= entityInstance %> = entity;
        mockedAxios.post.mockReturnValue(Promise.resolve({data: {}}));

        // WHEN
        comp.save();
        await comp.$nextTick();

        // THEN
        expect(mockedAxios.post).toHaveBeenCalledWith('api/<%= entityApiUrl %>', entity);
        expect(comp.isSaving).toEqual(false);
      });
    });
  });

});
