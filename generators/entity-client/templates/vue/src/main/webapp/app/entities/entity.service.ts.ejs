import axios from 'axios';
<% if (pagination !== 'no') { %>
import buildPaginationQueryOpts from '@/shared/sort/sorts';
<% } %>
import { I<%= entityAngularName %> } from '@/shared/model/<%= entityModelFileName %>.model';

<%_
const baseApi = (applicationType === 'gateway' && locals.microserviceName) ? 'services/' + microserviceName.toLowerCase() + '/api/' : 'api/';
_%>

const baseApiUrl = '<%= baseApi + entityApiUrl %>';
<%_
if (searchEngine === 'elasticsearch') { _%>
const baseSearchApiUrl = '<%= baseApi %>_search/<%= entityApiUrl %>?query=';
<%_ } _%>

export default class <%= entityAngularName %>Service {
  <%_
  if (searchEngine === 'elasticsearch') { _%>
  public search(query<% if (pagination !== 'no') { %>, paginationQuery<% } %>) : Promise<any> {
    return axios.get(`${baseSearchApiUrl}${query}<% if (pagination !== 'no') { %>&${buildPaginationQueryOpts(paginationQuery)}<% } %>`).data;
  }
  <%_ } _%>

  public find(id: <% if (pkType === 'String'  || pkType === 'UUID') { %>string<% } else { %>number<% } %>) : Promise<I<%= entityAngularName %>> {
    return axios.get(`${baseApiUrl}/${id}`).data;
    });
  }

  public retrieve(<% if (pagination !== 'no') { %>paginationQuery?: any<% } %>) : Promise<any> {
    return axios.get(baseApiUrl<% if (pagination !== 'no') { %> + `?${buildPaginationQueryOpts(paginationQuery)}` <% } %>);
    });
  }
  <%_
  if (!readOnly) { _%>

  public delete(id: <% if (pkType === 'String'  || pkType === 'UUID') { %>string<% } else { %>number<% } %>) : Promise<any> {
    return axios.delete(`${baseApiUrl}/${id}`);
    });
  }

  public create(entity: I<%= entityAngularName %>) : Promise<I<%= entityAngularName %>> {
    return axios.post(`${baseApiUrl}`, entity).data;
    });
  }

  public update(entity: I<%= entityAngularName %>) : Promise<I<%= entityAngularName %>> {
    return axios.put(`${baseApiUrl}`, entity).data;
    });
  }
  <%_ } _%>
}
