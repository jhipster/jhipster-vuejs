<script>
import axios from 'axios';

const baseApiUrl = 'api/<%= entityApiUrl %>';
<%_ if (searchEngine === 'elasticsearch') { _%>
const baseSearchApiUrl = 'api/_search/<%= entityApiUrl %>?query=';
<%_ } _%>
<% if (pagination !== 'no') { %>
function buildPaginationQueryOpts(paginationQuery) {
    let sorts = '';
    for (let idx in paginationQuery.sort) {
        if (sorts.length > 0) {
            sorts += '&';
        }
        sorts += 'sort=' + paginationQuery.sort[idx];
    }
    return `${sorts}&page=${paginationQuery.page}&size=${paginationQuery.size}`;
}
<% } %>
const <%= entityAngularName %>Service = {
    methods: {
        <%_ if (searchEngine === 'elasticsearch') { _%>
        search<%= entityAngularName %>s(query<% if (pagination !== 'no') { %>, paginationQuery<% } %>) {
            return axios.get(`${baseSearchApiUrl}${query}<% if (pagination !== 'no') { %>&${buildPaginationQueryOpts(paginationQuery)}<% } %>`);
        },
        <%_ } _%>
        find<%= entityAngularName %>(id) {
            return axios.get(`${baseApiUrl}/${id}`);
        },
        retrieve<%= entityAngularName %>s(<% if (pagination !== 'no') { %>paginationQuery<% } %>) {
            return axios.get(baseApiUrl<% if (pagination !== 'no') { %> + `?${buildPaginationQueryOpts(paginationQuery)}` <% } %>);
        },
        delete<%= entityAngularName %>(id) {
            return axios.delete(`${baseApiUrl}/${id}`);
        },
        create<%= entityAngularName %>(entity) {
            return axios.post(`${baseApiUrl}`, entity);
        },
        update<%= entityAngularName %>(entity) {
            return axios.put(`${baseApiUrl}`, entity);
        }
    }
};

export default <%= entityAngularName %>Service;

</script>
