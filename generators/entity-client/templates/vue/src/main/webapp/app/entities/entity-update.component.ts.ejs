import { numeric, required, minLength, maxLength } from 'vuelidate/lib/validators';
<%_
    let include = false;
    for (idx in fields) {
    const fieldName = fields[ idx ].fieldName;
    const fieldType = fields[idx].fieldType;
    if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType) && !include) {
        include = true;
        _%>
import moment from 'moment'
    <%_ } } _%>

import <%= entityAngularName %>Service from './<%= entityFileName %>.service.vue';
<%_
    for (idx in relationships) {
    const otherEntityAngularName = relationships[idx].otherEntityAngularName;
    const otherEntityFileName = otherEntityAngularName === 'User' ? 'user' : relationships[idx].otherEntityFileName;
    const otherEntityFolderName = otherEntityAngularName === 'User' ? (clientRootFolder ? '../user' : 'user') : relationships[idx].otherEntityFileName;
_%>
import <%= otherEntityAngularName %>Service from '../<%= otherEntityFolderName %>/<%= otherEntityFileName %>.service.vue';
<%_ } _%>
<% if (fieldsContainBlob) { %>
import JhiDataUtils from '../../<% if (clientRootFolder) { %>../<% } %>shared/data/DataUtilsService.vue';
<% } %>

const <%= entityAngularName %>Update =  {
    mixins: [<%= entityAngularName %>Service<% if (fieldsContainBlob) { %>, JhiDataUtils<% } %><%_ for (idx in relationships) { const otherEntityAngularName = relationships[idx].otherEntityAngularName;_%> ,<%= otherEntityAngularName %>Service <%_ } _%>],
    data() {
        return {
            <%= entityInstance %>: {
                <%_ for (idx in fields) {
                    const fieldName = fields[idx].fieldName;
                _%>
                <%= fieldName %>: null,
                <%_ } _%>
                <%_ for (idx in relationships) {
                    const otherEntityName = relationships[idx].otherEntityName;
                _%>
                <%= otherEntityName %>s: [],
                <%_ } _%>
            },
            <%_ for (idx in relationships) {
                const otherEntityName = relationships[idx].otherEntityName;
            _%>
                    <%= otherEntityName %>s: [],
            <%_ } _%>
            isSaving: false
        }
    },
    validations: {
        <%= entityInstance %>: {
            <%_ for (idx in fields) {
                const fieldName = fields[idx].fieldName;
                const fieldType = fields[idx].fieldType;
                _%>
                <%= fieldName %>:  {
                    <%_ if (fields[idx].fieldValidate === true) { _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                            required,
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
                            minLength: minLength(<%= fields[idx].fieldValidateRulesMinlength %>),
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
                            maxLength: maxLength(<%= fields[idx].fieldValidateRulesMaxlength %>),
                        <%_ } _%>
                        <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                            numeric
                        <%_ } _%>

                    <%_ } _%>
                },
            <%_ } _%>
        }
    },
    beforeRouteEnter (to, from, next) {
        next(vm => {
            if (to.params.<%= entityInstance %>Id) {
                vm.retrieve<%= entityAngularName %>(to.params.<%= entityInstance %>Id);
            }
            <%_ if (relationships.length > 0) { _%>
            vm.initRelationships();
            <%_ } _%>
        });
    },
    methods: {
        save() {
            this.isSaving = true;
            <%_ for (idx in fields) {
                const fieldName = fields[ idx ].fieldName;
                const fieldType = fields[idx].fieldType;
                if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType)) { _%>
                    this.<%= entityInstance %>.<%= fieldName %> = moment(this.<%= entityInstance %>.<%= fieldName %>, 'YYYY-MM-DDTHH:mm');
                <%_ }
            } _%>
            if (this.<%= entityInstance %>.id) {
                this.update<%= entityAngularName %>(this.<%= entityInstance %>).then(() => {
                    this.$router.go(-1);
                    this.isSaving = false;
                });
            } else {
                this.create<%= entityAngularName %>(this.<%= entityInstance %>).then(() => {
                    this.$router.go(-1);
                    this.isSaving = false;
                });
            }
        },
        retrieve<%= entityAngularName %>(<%= entityInstance %>Id) {
            this.find<%= entityAngularName %>(<%= entityInstance %>Id).then((res) => {
                this.<%= entityInstance %> = res.data;

                <%_ for (idx in fields) {
                    const fieldName = fields[ idx ].fieldName;
                    const fieldType = fields[idx].fieldType;
                    if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType)) { _%>
                        this.<%= entityInstance %>.<%= fieldName %> = moment(this.<%= entityInstance %>.<%= fieldName %>, 'YYYY-MM-DDTHH:mm:ssZ').format('YYYY-MM-DDTHH:mm');
                    <%_ }
                } _%>
            });
        },
        previousState() {
            this.$router.go(-1);
        },
        <%_ if (fieldsContainBlob && fieldsContainImageBlob) { _%>
        _clearInputImage(field, fieldContentType, idInput) {
            this.clearInputImage(this.<%= entityInstance %>, this.elementRef, field, fieldContentType, idInput);
        },
        <%_ } _%>
        initRelationships() {
            <%_
                let hasManyToMany = false;
                for (idx in relationships) {
                const otherEntityName = relationships[idx].otherEntityName;
                const otherEntityAngularName = relationships[idx].otherEntityAngularName;
                if (relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) {
                    hasManyToMany = true;
                }
            _%>
            this.retrieve<%= otherEntityAngularName %>s().then((res) => {
                this.<%= otherEntityName %>s = res.data;
            });
            <%_ } _%>
        }<%_ if (hasManyToMany) { _%>,
        getSelected(selectedVals, option) {
            if (selectedVals) {
                for (let i = 0; i < selectedVals.length; i++) {
                    if (option.id === selectedVals[i].id) {
                        return selectedVals[i];
                    }
                }
            }
            return option;
        }
        <%_ } _%>
    }
};

export default <%= entityAngularName %>Update;
