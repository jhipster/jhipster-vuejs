import { Component,<% if (!fieldsContainBlob) { %> Vue,<% } %> Inject } from 'vue-property-decorator';
<% if (fieldsContainBlob) { %>
  import { mixins } from 'vue-class-component';
  import JhiDataUtils from '@/shared/data/data-utils.service';
<% } %>
import { numeric, required, minLength, maxLength } from 'vuelidate/lib/validators';
<%_
    let include = false;
    for (idx in fields) {
    const fieldName = fields[ idx ].fieldName;
    const fieldType = fields[idx].fieldType;
    if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType) && !include) {
        include = true;
        _%>
import moment from 'moment'
    <%_ } } _%>

<%_
    const importEntitiesSeen = [entityAngularName];
    for (idx in relationships) {
    const otherEntityAngularName = relationships[idx].otherEntityAngularName;
    const otherEntityFileName = relationships[idx].otherEntityFileName;
    const otherEntityFolderName = relationships[idx].otherEntityFileName;
    const otherEntityModelName = relationships[idx].otherEntityModelName;
_%>
  <% if (otherEntityAngularName === 'User') { %>
import UserService from '@/admin/user-management/user-management.service';
  <% } else if (!importEntitiesSeen.includes(otherEntityAngularName)) { %>
import <%= otherEntityAngularName %>Service from '../<%= otherEntityFolderName %>/<%= otherEntityFileName %>.service';
import { I<%= otherEntityAngularName %> } from '@/shared/model/<%= otherEntityModelName %>.model';
  <% } %>
<%_ importEntitiesSeen.push(otherEntityAngularName); } _%>
import { I<%= entityAngularName %> } from '@/shared/model/<%= entityModelFileName %>.model';
import <%= entityAngularName %>Service from './<%= entityFileName %>.service';

const validations: any = {
  <%= entityInstance %>: {
    <%_ for (idx in fields) {
      const fieldName = fields[idx].fieldName;
      const fieldType = fields[idx].fieldType;
    _%>
    <%= fieldName %>:  {
    <%_ if (fields[idx].fieldValidate === true) { _%>
    <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
    required,
    <%_ } _%>
    <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
      minLength: minLength(<%= fields[idx].fieldValidateRulesMinlength %>),
    <%_ } _%>
    <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
      maxLength: maxLength(<%= fields[idx].fieldValidateRulesMaxlength %>),
    <%_ } _%>
    <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
    numeric
    <%_ } _%>

    <%_ } _%>
    },
    <%_ } _%>
  }
};

@Component({
  validations
})
export default class <%= entityAngularName %>Update extends <% if (fieldsContainBlob) { %>mixins(JhiDataUtils)<% } else { %>Vue<% } %> {
  @Inject('<%= entityInstance %>Service') private <%= entityInstance %>Service : () => <%= entityAngularName %>Service;
  public <%= entityInstance %>: I<%= entityAngularName %>;
  <%_
    const entitiesSeen = [entityAngularName];
    for (idx in relationships) {
    const otherEntityName = relationships[idx].otherEntityName;
    const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
    const otherEntityAngularName = relationships[idx].otherEntityAngularName;
  _%>
  <%_ if (!entitiesSeen.includes(otherEntityAngularName)) { %>
  @Inject('<%= otherEntityName %>Service') private <%= otherEntityName %>Service : () => <%= otherEntityAngularName %>Service;
  <%_ } _%>
  public <%= otherEntityNamePlural %> : <% if (otherEntityAngularName === 'User') { %>Array<any><%_ } else { _%>I<%= otherEntityAngularName %>[]<%_ } _%>;
  <%_ entitiesSeen.push(otherEntityAngularName); } _%>
  public isSaving: boolean;

  constructor() {
    super();
    this.<%= entityInstance %> = {
      <%_ for (idx in fields) {
          const fieldName = fields[idx].fieldName;
      _%>
      <%= fieldName %>: null,
      <%_ } _%>
      <%_ for (idx in relationships) {
          const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
          if (relationships[idx].relationshipType !== 'many-to-one') {
      _%>
      <%= otherEntityNamePlural %>: [],
      <%_ } } _%>
    };
    <%_ for (idx in relationships) {
      const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
    _%>
    this.<%= otherEntityNamePlural %> = [];
    <%_ } _%>
    this.isSaving = false;
  }

  beforeRouteEnter(to, from, next) {
    next(vm => {
      if (to.params.<%= entityInstance %>Id) {
        vm.retrieve<%= entityAngularName %>(to.params.<%= entityInstance %>Id);
      }
      <%_ if (relationships.length > 0) { _%>
      vm.initRelationships();
      <%_ } _%>
    });
  }

  public save() : void {
    this.isSaving = true;
    <%_ for (idx in fields) {
        const fieldName = fields[ idx ].fieldName;
        const fieldType = fields[idx].fieldType;
        if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType)) { _%>
      this.<%= entityInstance %>.<%= fieldName %> = moment(this.<%= entityInstance %>.<%= fieldName %>, 'YYYY-MM-DDTHH:mm');
        <%_ }
    } _%>
    if (this.<%= entityInstance %>.id) {
      this.<%= entityInstance %>Service().update(this.<%= entityInstance %>).then(() => {
        this.isSaving = false;
        this.$router.go(-1);
      });
    } else {
      this.<%= entityInstance %>Service().create(this.<%= entityInstance %>).then(() => {
        this.isSaving = false;
        this.$router.go(-1);
      });
    }
  }

  public retrieve<%= entityAngularName %>(<%= entityInstance %>Id) : void {
    this.<%= entityInstance %>Service().find(<%= entityInstance %>Id).then((res) => {
      this.<%= entityInstance %> = res;

      <%_ for (idx in fields) {
          const fieldName = fields[idx].fieldName;
          const fieldType = fields[idx].fieldType;
          if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType)) { _%>
      this.<%= entityInstance %>.<%= fieldName %> = moment(this.<%= entityInstance %>.<%= fieldName %>, 'YYYY-MM-DDTHH:mm:ssZ');
          <%_ }
      } _%>
    });
  }

  public previousState() : void {
    this.$router.go(-1);
  }

  <%_ if (fieldsContainBlob && fieldsContainImageBlob) { _%>
  public clearInputImage(field, fieldContentType, idInput) : void {
    if (this.<%= entityInstance %> && field && fieldContentType) {
      if (this.<%= entityInstance %>.hasOwnProperty(field)) {
        this.<%= entityInstance %>[field] = null;
      }
      if (this.<%= entityInstance %>.hasOwnProperty(fieldContentType)) {
        this.<%= entityInstance %>[fieldContentType] = null;
      }
      if (idInput) {
        (<any>this).$refs[idInput] = null;
      }
    }
  }

  <%_ } _%>
  public initRelationships() : void {
    <%_
        let hasManyToMany = false;
        for (idx in relationships) {
        const otherEntityName = relationships[idx].otherEntityName;
        const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
        const otherEntityAngularName = relationships[idx].otherEntityAngularName;
        if (relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) {
            hasManyToMany = true;
        }
    _%>
    this.<%= otherEntityName %>Service().retrieve().then((res) => {
      this.<%= otherEntityNamePlural %> = res.data;
    });
    <%_ } _%>
  }

  <%_ if (hasManyToMany) { _%>
  public getSelected(selectedVals, option) : any {
    if (selectedVals) {
      for (let i = 0; i < selectedVals.length; i++) {
        if (option.id === selectedVals[i].id) {
          return selectedVals[i];
        }
      }
    }
    return option;
  }
  <%_ } _%>
}
