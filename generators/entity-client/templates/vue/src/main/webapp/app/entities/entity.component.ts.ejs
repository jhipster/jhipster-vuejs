import Principal from '../../<%_ if (clientRootFolder) { _%>../<%_ } _%>components/account/Principal.vue';
import <%= entityAngularName %>Service from './<%= entityFileName %>.service.vue';
<% if (fieldsContainBlob) { %>
    import JhiDataUtils from '../../<% if (clientRootFolder) { %>../<% } %>shared/data/DataUtilsService.vue';
<% } %>

const <%= entityAngularName %> = {
    mixins: [Principal, <%= entityAngularName %>Service<% if (fieldsContainBlob) { %>, JhiDataUtils<% } %>],
    data() {
      return {
          <%_ if (searchEngine === 'elasticsearch') { _%>
          currentSearch: '',
          <%_ } _%>
          removeId: null,
        <%_ if (pagination !== 'no') { _%>
          itemsPerPage: 20,
          queryCount: null,
          page: 1,
          previousPage: null,
          propOrder: 'id',
          reverse: false,
          totalItems: 0,
        <%_ } _%>
          <%= entityInstancePlural %>: []
      }
    },
    beforeRouteEnter (to, from, next) {
        next(vm => {
            vm.retrieveAll<%= entityAngularName %>s();
        })
    },
    methods: {
        <%_ if (searchEngine === 'elasticsearch') { _%>
        search(query) {
            if (!query) {
              return this.clear();
            }
            this.currentSearch = query;
            this.retrieveAll<%= entityAngularName %>s();
        },
        clear() {
            this.currentSearch = '';
            this.retrieveAll<%= entityAngularName %>s();
        },
        <%_ } _%>
        retrieveAll<%= entityAngularName %>s() {
            <% if (pagination !== 'no') { %>
            const paginationQuery = {
                page: this.page - 1,
                size: this.itemsPerPage,
                sort: this.sort()
            };<% } %>
            <%_ if (searchEngine === 'elasticsearch') { _%>
            if (this.currentSearch) {
                this.search<%= entityAngularName %>s(this.currentSearch<%_ if (pagination !== 'no') { _%>, paginationQuery<%_ } _%>).then((res) => {
                    this.<%= entityInstancePlural %> = res.data;
                    <%_ if (pagination !== 'no') { _%>
                    this.totalItems = Number(res.headers['x-total-count']);
                    this.queryCount = this.totalItems;
                    <%_ } _%>
                });
                return;
            }
            <%_ } _%>
            this.retrieve<%= entityAngularName %>s(<%_ if (pagination !== 'no') { _%>paginationQuery<%_ } _%>).then((res) => {
                this.<%= entityInstancePlural %> = res.data;
                <%_ if (pagination !== 'no') { _%>
                this.totalItems = Number(res.headers['x-total-count']);
                this.queryCount = this.totalItems;
                <%_ } _%>
            });
        },
        prepareRemove(instance) {
            this.removeId = instance.id;
            this.$refs.removeEntity.show();
        },
        remove<%= entityAngularName %>() {
            this.delete<%= entityAngularName %>(this.removeId).then(() => {
                this.removeId = null;
                this.retrieveAll<%= entityAngularName %>s();
                this.closeDialog();
            });
        },
        <%_ if (pagination !== 'no') { _%>
        sort() {
            const result = [this.propOrder + ',' + (this.reverse ? 'asc' : 'desc')];
            if (this.propOrder !== 'id') {
                result.push('id');
            }
            return result;
        },
        loadPage(page: number) {
            if (page !== this.previousPage) {
                this.previousPage = page;
                this.transition();
            }
        },
        transition() {
            this.retrieveAll<%= entityAngularName %>s();
        },
        changeOrder(propOrder) {
            this.propOrder = propOrder;
            this.reverse = !this.reverse;
        },
        <%_ } _%>
        closeDialog() {
            this.$refs.removeEntity.hide();
        }
    }
};

export default <%= entityAngularName %>;
