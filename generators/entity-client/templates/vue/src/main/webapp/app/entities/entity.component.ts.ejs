import { mixins } from 'vue-class-component';

import { Component, Inject } from 'vue-property-decorator';
import Vue2Filters from 'vue2-filters';
import { I<%= entityAngularName %> } from '@/shared/model/<%= entityModelFileName %>.model';
import AlertMixin from '@/shared/alert/alert.mixin';
<% if (fieldsContainBlob || pagination === 'infinite-scroll') { %>
import JhiDataUtils from '@/shared/data/data-utils.service';
<% } %>
import <%= entityAngularName %>Service from './<%= entityFileName %>.service';

@Component
export default class <%= entityAngularName %> extends <% if (fieldsContainBlob || pagination === 'infinite-scroll') { %>mixins(JhiDataUtils, Vue2Filters.mixin, AlertMixin)<% } else { %> mixins(Vue2Filters.mixin, AlertMixin)<% } %> {
  @Inject('<%= entityInstance %>Service') private <%= entityInstance %>Service: () => <%= entityAngularName %>Service;
  <%_ if (searchEngine === 'elasticsearch') { _%>
  public currentSearch = '';
  <%_ } _%>
  private removeId: <% if (pkType === 'String'  || pkType === 'UUID') { %>string<% } else { %>number<% } %> = null;
  <%_ if (pagination !== 'no') { _%>
  public itemsPerPage = 20;
  public queryCount: number = null;
  public previousPage = 1;
  public propOrder = 'id';
  public reverse = <%_ if (pagination === 'infinite-scroll') { _%>true<%_ } else { _%>false<%_ } _%>;
  public totalItems = 0;
  <%_ } _%>
  <%_ if (pagination === 'pagination') { _%>
  public page = 1;
  <%_ } _%>
  <%_ if (pagination === 'infinite-scroll') { _%>
  public infiniteId = +new Date();
  public infiniteLoadingState = null;
  public links = {};
  public page = 0;
  <%_ } _%>
  
  public <%= entityInstancePlural %>: I<%= entityAngularName %>[] = [];

  public isFetching = false;

  public mounted(): void {
    this.retrieveAll<%= entityAngularName %>s();
  }

  <%_ if (searchEngine === 'elasticsearch') { _%>
  public search(query) : void {
    if (!query) {
      return this.clear();
    }
    this.currentSearch = query;
    this.retrieveAll<%= entityAngularName %>s();
  }

  <%_ } _%>
  public clear() : void {
    <%_ if (searchEngine === 'elasticsearch') { _%>
    this.currentSearch = '';
    <%_ } _%>
    <%_ if (pagination === 'pagination') { _%>
    this.page = 1;
    <%_ } _%>
    <%_ if (pagination === 'infinite-scroll') { _%>
    this.page = 0;
    this.links = {};
    this.infiniteId += 1;
    this.<%= entityInstancePlural %> = [];
    <%_ } _%>
    this.retrieveAll<%= entityAngularName %>s();
  }

  <%_ if (pagination === 'infinite-scroll') { _%>
  public reset(): void {
    this.page = 0;
    this.infiniteId += 1;
    this.<%= entityInstancePlural %> = [];
    this.retrieveAll<%= entityAngularName %>s();
  }
  <%_ } _%>

  public retrieveAll<%= entityAngularName %>s() :void {
    this.isFetching = true;
    <% if (pagination !== 'no') { %>
    const paginationQuery = {
      page: this.page<%_ if (pagination === 'pagination') { _%> - 1<%_ } _%>,
      size: this.itemsPerPage,
      sort: this.sort()
    };<% } %>
    <%_ if (searchEngine === 'elasticsearch') { _%>
    if (this.currentSearch) {
      this.<%= entityInstance %>Service().search(this.currentSearch<%_ if (pagination !== 'no') { _%>, paginationQuery<%_ } _%>).then(res => {
        <%_ if (pagination === 'no') { _%>
        this.<%= entityInstancePlural %> = res;
        <%_ } _%>
        <%_ if (pagination === 'pagination') { _%>
        this.<%= entityInstancePlural %> = res.data;
        <%_ } _%>
        <%_ if (pagination === 'infinite-scroll') { _%>
        if(res.data && res.data.length > 0){
          for (let i = 0; i < res.data.length; i++) {
            this.<%= entityInstancePlural %>.push(res.data[i]);
          }
          if(res.headers && res.headers['link']){
            this.links = this.parseLinks(res.headers['link']);
          }
        }
        <%_ } _%>
        <%_ if (pagination !== 'no') { _%>
        this.totalItems = Number(res.headers['x-total-count']);
        this.queryCount = this.totalItems;
        <%_ } _%>
        this.isFetching = false;
        <%_ if (pagination === 'infinite-scroll') { _%>
        if(this.infiniteLoadingState !== null) {
          this.infiniteLoadingState.loaded();
          if(this.links !== {} && this.page >= this.links['last']){
            this.infiniteLoadingState.complete();
          }
        }
        <%_ } _%>
      }, err => {
        this.isFetching = false;
      });
      return;
    }
    <%_ } _%>
    this.<%= entityInstance %>Service().retrieve(<%_ if (pagination !== 'no') { _%>paginationQuery<%_ } _%>).then(res => {
      <%_ if (pagination !== 'infinite-scroll') { _%>
      this.<%= entityInstancePlural %> = res.data;
      <%_ } else { _%>
      if(res.data && res.data.length > 0){
        for (let i = 0; i < res.data.length; i++) {
          this.<%= entityInstancePlural %>.push(res.data[i]);
        }
        if(res.headers && res.headers['link']){
          this.links = this.parseLinks(res.headers['link']);
        }
      }
      <%_ } _%>
      <%_ if (pagination !== 'no') { _%>
      this.totalItems = Number(res.headers['x-total-count']);
      this.queryCount = this.totalItems;
      <%_ } _%>
      this.isFetching = false;
      <%_ if (pagination === 'infinite-scroll') { _%>
      if(this.infiniteLoadingState !== null) {
        this.infiniteLoadingState.loaded();
        if(this.links !== {} && this.page >= this.links['last']){
          this.infiniteLoadingState.complete();
        }
      }
      <%_ } _%>      
    }, err => {
      this.isFetching = false;
    });
  }

  <%_ if (!readOnly) { _%>
  public prepareRemove(instance: I<%= entityAngularName %>) : void {
    this.removeId = instance.id;
    if (<any>this.$refs.removeEntity) {
      (<any>this.$refs.removeEntity).show();
    }
  }

  public remove<%= entityAngularName %>() : void {
    this.<%= entityInstance %>Service().delete(this.removeId).then(() => {
      <%_ if (enableTranslation) { _%>
      const message = this.$t('<%= i18nKeyPrefix %>.deleted', { 'param' : this.removeId });
      <%_ } else {_%>
      const message = 'A <%= entityAngularName %> is deleted with identifier ' + this.removeId;
      <%_ } _%>
      this.alertService().showAlert(message, 'danger');
      this.getAlertFromStore();

      this.removeId = null;
      this.retrieveAll<%= entityAngularName %>s();
      this.closeDialog();
    });
  }

  <%_ } _%>
  <%_ if (pagination === 'infinite-scroll') { _%>
  public loadMore($state): void {
    this.infiniteLoadingState = $state;
    if (this.page >= this.links['last']){ 
      this.infiniteLoadingState.complete();
    }
    if (this.isFetching) {
      return;
    } else {
      this.previousPage = this.page++;
      this.transition();
    }
  }

  <%_ } _%>
  <%_ if (pagination !== 'no') { _%>
  public sort() : Array<any> {
    const result = [this.propOrder + ',' + (this.reverse ? 'asc' : 'desc')];
    if (this.propOrder !== 'id') {
      result.push('id');
    }
    return result;
  }

  public loadPage(page: number) : void {
    if (page !== this.previousPage) {
      this.previousPage = page;
      this.transition();
    }
  }

  public transition() : void {
    this.retrieveAll<%= entityAngularName %>s();
  }

  public changeOrder(propOrder) : void {
    this.propOrder = propOrder;
    this.reverse = !this.reverse;
    this.transition();
  }
  
  <%_ } _%>
  public closeDialog() : void {
    (<any>this.$refs.removeEntity).hide();
  }
}
