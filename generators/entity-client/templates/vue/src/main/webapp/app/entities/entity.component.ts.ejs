import { mixins } from 'vue-class-component';
import { Component, Inject, Vue } from 'vue-property-decorator';
import { I<%= entityAngularName %> } from '@/shared/model/<%= entityModelFileName %>.model';
<% if (fieldsContainBlob) { %>
import JhiDataUtils from '@/shared/data/data-utils.service';
<% } %>
import <%= entityAngularName %>Service from './<%= entityFileName %>.service';

@Component
export default class <%= entityAngularName %> extends <% if (fieldsContainBlob) { %>mixins(JhiDataUtils)<% } else { %> Vue<% } %> {
  @Inject('<%= entityInstance %>Service') private <%= entityInstance %>Service : () => <%= entityAngularName %>Service;
  <%_ if (searchEngine === 'elasticsearch') { _%>
  public currentSearch: string = '';
  <%_ } _%>
  private removeId: string = null;
  <%_ if (pagination !== 'no') { _%>
  public itemsPerPage: number = 20;
  public queryCount: number = null;
  public page: number = 1;
  public previousPage: number = null;
  public propOrder: string = 'id';
  public reverse: boolean = <%_ if (pagination === 'infinite-scroll') { _%>true<%_ } else { _%>false<%_ } _%>;
  public totalItems: number = 0;
  <%_ } _%>
  public <%= entityInstancePlural %>: I<%= entityAngularName %>[] = [];

  public mounted(): void {
    this.retrieveAll<%= entityAngularName %>s();
  }

  <%_ if (searchEngine === 'elasticsearch') { _%>
  public search(query) : void {
    if (!query) {
      return this.clear();
    }
    this.currentSearch = query;
    this.retrieveAll<%= entityAngularName %>s();
  }

  <%_ } _%>
  public clear() : void {
    <%_ if (searchEngine === 'elasticsearch') { _%>
    this.currentSearch = '';
    <%_ } _%>
    <%_ if (pagination !== 'no') { _%>
    this.page = 1;
    <%_ } _%>
    this.retrieveAll<%= entityAngularName %>s();
  }

  public retrieveAll<%= entityAngularName %>s() :void {
    <% if (pagination !== 'no') { %>
    const paginationQuery = {
      page: this.page - 1,
      size: this.itemsPerPage,
      sort: this.sort()
    };<% } %>
    <%_ if (searchEngine === 'elasticsearch') { _%>
    if (this.currentSearch) {
      this.<%= entityInstance %>Service().search(this.currentSearch<%_ if (pagination !== 'no') { _%>, paginationQuery<%_ } _%>).then((res) => {
        this.<%= entityInstancePlural %> = <%_ if (pagination !== 'no') { _%>res.data<%_ } else { _%>res<%_ } _%>;
        <%_ if (pagination !== 'no') { _%>
        this.totalItems = Number(res.headers['x-total-count']);
        this.queryCount = this.totalItems;
        <%_ } _%>
      });
      return;
    }
    <%_ } _%>
    this.<%= entityInstance %>Service().retrieve(<%_ if (pagination !== 'no') { _%>paginationQuery<%_ } _%>).then((res) => {
      this.<%= entityInstancePlural %> = res.data;
      <%_ if (pagination !== 'no') { _%>
      this.totalItems = Number(res.headers['x-total-count']);
      this.queryCount = this.totalItems;
      <%_ } _%>
    });
  }

  public prepareRemove(instance) : void {
    this.removeId = instance.id;
  }

  public remove<%= entityAngularName %>() : void {
    this.<%= entityInstance %>Service().delete(this.removeId).then(() => {
      this.removeId = null;
      this.retrieveAll<%= entityAngularName %>s();
      this.closeDialog();
    });
  }

  <%_ if (pagination !== 'no') { _%>
  public sort() : Array<any> {
    const result = [this.propOrder + ',' + (this.reverse ? 'asc' : 'desc')];
    if (this.propOrder !== 'id') {
      result.push('id');
    }
    return result;
  }

  public loadPage(page: number) : void {
    if (page !== this.previousPage) {
      this.previousPage = page;
      this.transition();
    }
  }

  public transition() : void {
    this.retrieveAll<%= entityAngularName %>s();
  }

  public changeOrder(propOrder) : void {
    this.propOrder = propOrder;
    this.reverse = !this.reverse;
  }

  <%_ } _%>
  public closeDialog() : void {
    (<any>this.$refs.removeEntity).hide();
  }
}
