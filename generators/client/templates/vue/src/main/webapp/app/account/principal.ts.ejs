import axios from 'axios';
import { Component, Inject, Vue } from 'vue-property-decorator';
<%_ if (enableTranslation) { _%>
import TranslationService from '@/locale/translation.service';
<%_ } _%>

<%_ if (websocket === 'spring-websocket') { _%>
import TrackerService from '../admin/tracker/TrackerService.vue';
<%_ } _%>

@Component
export default class Principal extends Vue {

  <%_ if (websocket === 'spring-websocket') { _%>
  @Inject('trackerService') private trackerService: () => TrackerService;
  <%_ } _%>
  <%_ if (enableTranslation) { _%>
  @Inject('translationService') private translationService: () => TranslationService;
  <%_ } _%>

  public created(): void {
    const token = <%_ if (authenticationType === 'jwt') { _%> localStorage.getItem('jhi-authenticationToken') || sessionStorage.getItem('jhi-authenticationToken'); <%_ } else { _%> (<any>this).$cookie.get('JSESSIONID') || (<any>this).$cookie.get('XSRF-TOKEN'); <%_ } _%>
    if (!this.$store.getters.account && !this.$store.getters.logon && token) {
      this.retrieveAccount();
    }
  }

  public retrieveAccount(): any {
    this.$store.commit('authenticate');
    axios.get('api/account').then((response) => {
      const account = response.data;
      if (account) {
        this.$store.commit('authenticated', account);
        <%_ if (enableTranslation) { _%>
        if (this.$store.getters.currentLanguage !== account.langKey) {
          this.$store.commit('currentLanguage', account.langKey);
        }
        <%_ } _%>
        <%_ if (websocket === 'spring-websocket') { _%>
        this.trackerService.connect();
        <%_ } _%>
      } else {
        this.$store.commit('logout');
        (<any> this).$router.push('/');
      }
      <%_ if (enableTranslation) { _%>
      this.refreshTranslation(this.$store.getters.currentLanguage);
      <%_ } _%>
    }).catch(() => {
      this.$store.commit('logout');
      (<any> this).$router.push('/');
    });
  }

  public hasAnyAuthority(authorities: any): any {
    if (typeof authorities === "string") {
      authorities = [authorities];
    }
    if (!this.authenticated || !this.userAuthorities) {
      return false;
    }

    for (let i = 0; i < authorities.length; i++) {
      if (this.userAuthorities.includes(authorities[i])) {
        return true;
      }
    }

    return false;
  }

  public get authenticated() {
    return this.$store.getters.authenticated;
  }

  public get userAuthorities(): any {
    return this.$store.getters.account.authorities;
  }

  public get username(): string {
    return this.$store.getters.account ? this.$store.getters.account.login : ''
  }
  <%_ if (enableTranslation) { _%>

  public refreshTranslation(newLanguage: string) : void {
    this.translationService().refreshTranslation(this.$i18n, newLanguage);
  }
  <%_ } _%>
}
