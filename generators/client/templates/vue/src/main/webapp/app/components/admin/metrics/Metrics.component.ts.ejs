import numeral from 'numeral';
import <%=jhiPrefixCapitalized%>MetricsModal from './MetricsModal.vue';
import MetricsService from './MetricsService.vue';

const <%=jhiPrefixCapitalized%>MetricsComponent = {
    name: '<%=jhiPrefixCapitalized%>MetricsComponent',
    mixins: [MetricsService],
    components: {
      'metrics-modal': <%=jhiPrefixCapitalized%>MetricsModal
    },
    beforeRouteEnter (to, from, next) {
        next(vm => {
            vm.refresh();
        })
    },
    data() {
        return {
            metrics: {},
            cachesStats: {},
            servicesStats: {},
            updatingMetrics: true,
            JCACHE_KEY: 'jcache.statistics',
            threads: null
        };
    },
    methods: {
        refresh() {
            this.updatingMetrics = true;
            let vm = this;
            this.getMetrics().then(function(res) {
                vm.metrics = res.data;
                vm.updatingMetrics = false;
                vm.servicesStats = {};
                vm.cachesStats = {};
                Object.keys(vm.metrics.timers).forEach((key) => {
                    const value = vm.metrics.timers[key];
                    if (key.includes('web.rest') || key.includes('service')) {
                        vm.servicesStats[key] = value;
                    }
                });
                Object.keys(vm.metrics.gauges).forEach((key) => {
                    if (key.includes('jcache.statistics')) {
                        const value = vm.metrics.gauges[key].value;
                        // remove gets or puts
                        const index = key.lastIndexOf('.');
                        const newKey = key.substr(0, index);

                        // Keep the name of the domain
                        vm.cachesStats[newKey] = {
                            name: vm.JCACHE_KEY.length,
                            value
                        };
                    }
                });
            });
        },
        refreshThreadDumpData() {
            let vm = this;
            if (this.$refs.metricsModal.show) {
                this.$refs.metricsModal.show();
            }
            this.retrieveThreadDump().then(function(res) {
                vm.threads = res.data.threads;
            });
        },
        filterNaN(input) {
            if (isNaN(input)) {
                return 0;
            }
            return input;
        },
        formatNumber1(value) {
            return numeral(value).format('0,0');
        },
        formatNumber2(value) {
            return numeral(value).format('0,00');
        }
    }
};

export default <%=jhiPrefixCapitalized%>MetricsComponent;
