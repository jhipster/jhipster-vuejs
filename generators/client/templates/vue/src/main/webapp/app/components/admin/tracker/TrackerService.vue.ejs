<script>
    import * as SockJS from 'sockjs-client';
    import * as Stomp from 'webstomp-client';

    export default {
        name: 'GatewayService',
        data() {
            return {
                stompClient: null,
                subscriber: null,
                connection: null,
                connectedPromise: null,
                listener: null,
                listenerObserver: null,
                alreadyConnectedOnce: false,
                subscription: null
            };
        },
        methods: {
            connect() {
                if (this.connectedPromise === null) {
                    this.connection = this.createConnection();
                }
                // building absolute path so that websocket doesn't fail when deploying with a context path
                const loc = window.location;
                let url;
                url = '//' + loc.host + loc.pathname + 'websocket/tracker';
                <%_ if (authenticationType === 'jwt' || authenticationType === 'uaa') { _%>
                const authToken = localStorage.getItem('jhi-authenticationToken') || sessionStorage.getItem('jhi-authenticationToken');
                if (authToken) {
                    url += '?access_token=' + authToken;
                }
                <%_ } _%>
                const socket = new SockJS(url);
                this.stompClient = Stomp.over(socket);
                const headers = {};
                <%_ if (authenticationType === 'session') { _%>
                headers['X-XSRF-TOKEN'] = this.$cookie.get('JSESSIONID') || this.$cookie.get('XSRF-TOKEN');
                <%_ } _%>
                this.stompClient.connect(headers, () => {
                    this.connectedPromise('success');
                    this.connectedPromise = null;
                    this.sendActivity();
                    if (!this.alreadyConnectedOnce) {
                        this.alreadyConnectedOnce = true;
                    }
                });
            },
            disconnect() {
                if (this.stompClient !== null) {
                    this.stompClient.disconnect();
                    this.stompClient = null;
                }
                if (this.subscription) {
                    this.subscription.unsubscribe();
                    this.subscription = null;
                }
                this.alreadyConnectedOnce = false;
            },
            receive() {
                return this.listener;
            },
            sendActivity() {
                if (this.stompClient !== null && this.stompClient.connected) {
                    this.stompClient.send(
                        '/topic/activity', // destination
                        JSON.stringify({'page': this.router.routerState.snapshot.url}), // body
                        {} // header
                    );
                }
            },
            subscribe() {
                this.connection.then(() => {
                    this.subscriber = this.stompClient.subscribe('/topic/tracker', (data) => {
                        this.listenerObserver.next(JSON.parse(data.body));
                    });
                });
            },
            unsubscribe() {
                if (this.subscriber !== null) {
                    this.subscriber.unsubscribe();
                }
                this.listener = this.createListener();
            },
            createListener() {
                return new Observable((observer) => {
                    this.listenerObserver = observer;
                });
            },
            createConnection() {
                return new Promise((resolve, reject) => this.connectedPromise = resolve);
            }
        }
    }
</script>
