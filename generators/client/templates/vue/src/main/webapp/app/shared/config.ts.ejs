import Vuex from 'vuex';
import VueI18n from 'vue-i18n';
import setupAxiosInterceptors from '../config/axios-interceptor';

import BootstrapVue from 'bootstrap-vue';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';

import VueCookie from 'vue-cookie';
import Vuelidate from 'vuelidate';
import Vue2Filters from 'vue2-filters';

import * as filters from './date/filters';

export function initVueApp(vue) {
  vue.use(VueCookie);
  vue.use(Vuelidate);
  vue.use(Vue2Filters);
  setupAxiosInterceptors(() => console.log('Unauthorized!'));
  filters.initFilters();
}

export function initBootstrapVue(vue) {
  vue.use(BootstrapVue);

  library.add(fas);
}

<%_ if (enableTranslation) { _%>
export function initI18N(vue) {
  vue.use(VueI18n);
  return new VueI18n({
    silentTranslationWarn: true
  });
}

<%_ } _%>
export function initVueXStore(vue) {
  vue.use(Vuex);
  return new Vuex.Store({
    state: {
      logon: false,
      userIdentity: null,
      authenticated: false,
      <%_ if (enableTranslation) { _%>
      currentLanguage: '<%= nativeLanguage %>',
      languages: 
        // jhipster-needle-i18n-language-key-pipe - JHipster will add/remove languages in this object
      <%_ } _%>
    },
    mutations: {
      authenticate(state) {
        state.logon = true;
      },
      authenticated(state, identity) {
        state.userIdentity = identity;
        state.authenticated = true;
        state.logon = false;
      },
      logout(state) {
        state.userIdentity = null;
        state.authenticated = false;
        state.logon = false;
      }
    },
    getters: {
      <%_ if (enableTranslation) { _%>
      currentLanguage: state => state.currentLanguage,
      languages: state => state.languages,
      <%_ } _%>
      logon: state => state.logon,
      account: state => state.userIdentity,
      authenticated: state => state.authenticated
    }
  });
}
