import axios from 'axios';
import { Store } from 'vuex';
import VueRouter from 'vue-router';
<%_ if (enableTranslation) { _%>
import TranslationService from '@/locale/translation.service';
<%_ } _%>

<%_ if (websocket === 'spring-websocket') { _%>
import TrackerService from '@/admin/tracker/tracker.service';
<%_ } _%>

export default class AccountService {

  constructor(
    private store: Store<any>,
    <%_ if (enableTranslation) { _%>
    private translationService: TranslationService,
    <%_ } _%>
    <%_ if (authenticationType === 'session' ||Â authenticationType === 'oauth2') { _%>
    private cookie: any,
    <%_ } _%>
    <%_ if (websocket === 'spring-websocket') { _%>
    private private trackerService: TrackerService,
    <%_ } _%>
    private router: VueRouter
  ) {
    this.init();
  }

  public init(): void {
    const token = <%_ if (authenticationType === 'jwt') { _%> localStorage.getItem('jhi-authenticationToken') || sessionStorage.getItem('jhi-authenticationToken'); <%_ } else { _%> this.cookie.get('JSESSIONID') || this.cookie.get('XSRF-TOKEN'); <%_ } _%>
    if (!this.store.getters.account && !this.store.getters.logon && token) {
      this.retrieveAccount();
    }
    this.retrieveProfiles();
  }

  public retrieveProfiles(): any {
    axios.get('management/info').then((res) => {
      if (res.data && res.data.activeProfiles && res.data.activeProfiles.indexOf(res.data['display-ribbon-on-profiles']) > -1) {
        this.store.commit('setRibbonOnProfiles', res.data['display-ribbon-on-profiles']);
        this.store.commit('setActiveProfiles', res.data['activeProfiles']);
      }
    });
  }

  public retrieveAccount(): any {
    this.store.commit('authenticate');
    axios.get('api/account').then((response) => {
      const account = response.data;
      if (account) {
        this.store.commit('authenticated', account);
        <%_ if (enableTranslation) { _%>
        if (this.store.getters.currentLanguage !== account.langKey) {
          this.store.commit('currentLanguage', account.langKey);
        }
        <%_ } _%>
        if(sessionStorage.getItem('requested-url')) {
          this.router.replace(sessionStorage.getItem("requested-url"));
          sessionStorage.removeItem("requested-url");
        }
        <%_ if (websocket === 'spring-websocket') { _%>
        this.trackerService.connect();
        <%_ } _%>
      } else {
        this.store.commit('logout');
        this.router.push('/');
        sessionStorage.removeItem("requested-url");
      }
      <%_ if (enableTranslation) { _%>
      this.translationService.refreshTranslation(this.store.getters.currentLanguage);
      <%_ } _%>
    }).catch(() => {
      this.store.commit('logout');
      this.router.push('/');
    });
  }

  public hasAnyAuthority(authorities: any): boolean {
    if (typeof authorities === "string") {
      authorities = [authorities];
    }
    if (!this.authenticated || !this.userAuthorities) {
      return false;
    }

    for (let i = 0; i < authorities.length; i++) {
      if (this.userAuthorities.includes(authorities[i])) {
        return true;
      }
    }

    return false;
  }

  public get authenticated(): boolean {
    return this.store.getters.authenticated;
  }

  public get userAuthorities(): any {
    return this.store.getters.account.authorities;
  }
}
