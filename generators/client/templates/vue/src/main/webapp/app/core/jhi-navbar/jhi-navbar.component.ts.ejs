import { Component, Inject, Vue } from 'vue-property-decorator';
import axios from 'axios';
import { VERSION } from '@/constants';
<%_ if (authenticationType !== 'oauth2') { _%>
import LoginModalService from '@/account/login-modal.service';
<%_ } else { %>
import LoginService from '@/account/login.service';
<%_ } %>
import AccountService from '@/account/account.service';
<%_ if (enableTranslation) { _%>
import TranslationService from '@/locale/translation.service';
<%_ } %>

@Component
export default class JhiNavbar extends Vue {
  <%_ if (authenticationType !== 'oauth2') { _%>
  @Inject('loginModalService')
  private loginModalService: () => LoginModalService;
  <%_ } else { %>
  @Inject('loginService')
  private loginService: () => LoginService;
  <%_ } %>
  <%_ if (enableTranslation) { _%>
  @Inject('translationService') private translationService: () => TranslationService;
  <%_ } %>
  @Inject('accountService') private accountService: () => AccountService;
  public version = VERSION ? 'v' + VERSION : '';
  public isNavbarCollapsed = true;
  private currentLanguage = this.$store.getters.currentLanguage;
  private languages: any = this.$store.getters.languages;

  created() {
    <%_ if (enableTranslation) { _%>
    this.translationService().refreshTranslation(this.currentLanguage);
    <%_ } _%>
  }

  public subIsActive(input) {
    const paths = Array.isArray(input) ? input : [input]
    return paths.some(path => {
      return this.$route.path.indexOf(path) === 0 // current path starts with this path string
    })
  }

  public getImageUrl() : boolean {
    return false;
  }

  public collapseNavbar() : void {
    this.isNavbarCollapsed = true;
  }

  <%_ if (enableTranslation) { _%>
  public changeLanguage(newLanguage: string) : void {
    this.translationService().refreshTranslation(newLanguage);
  }

  public isActiveLanguage(key: string) : boolean {
    return key === this.$store.getters.currentLanguage;
  }
  <%_ } _%>

  public logout() : void {
    <%_ if (authenticationType === 'oauth2') { _%>
    axios.post('api/logout').then(() => {
      this.$store.commit('logout');
      this.$router.push('/');
    });
    <%_ } else { _%>
      <%_ if (authenticationType === 'jwt') { _%>
    localStorage.removeItem('jhi-authenticationToken');
    sessionStorage.removeItem('jhi-authenticationToken');
      <%_ } _%>
    this.$store.commit('logout');
    this.$router.push('/');
    <%_ } _%>
  }

  public openLogin() : void {
    <%_ if (authenticationType !== 'oauth2') { _%>
    this.loginModalService().openLogin((<any>this).$root);
    <%_ } else { %>
    this.loginService().login();
    <%_ } %>
  }

  public get authenticated(): boolean {
    return this.$store.getters.authenticated;
  }

  public hasAnyAuthority(authorities: any): boolean {
    return this.accountService().hasAnyAuthority(authorities);
  }

  public get swaggerEnabled() : boolean {
    return (this.$store.getters.activeProfiles.indexOf('swagger') > -1);
  }

  public get inProduction() : boolean {
    return (this.$store.getters.activeProfiles.indexOf('prod') > -1);
  }
}
