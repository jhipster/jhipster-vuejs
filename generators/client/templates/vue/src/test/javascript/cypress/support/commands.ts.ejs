<%_
const baseApi = (applicationType === 'gateway' && locals.microserviceName) ? microserviceName.toLowerCase() + '/api/' : 'api/';
_%>

<%_ if (authenticationType !== 'oauth2') { _%>
Cypress.Commands.add('loginUsing', (username: string, password: string) => {
  return cy
    .request({
      method: 'POST',
      url: '/<%= baseApi %>authenticate',
      body: {
        username,
        password,
        rememberMe: null
      }
    })
    .then((result: any) => {
      const bearerToken = result.headers.authorization;
      if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {
        window.sessionStorage.setItem('jhi-authenticationToken', bearerToken.slice(7, bearerToken.length));
      }
    });
});
<%_ } else { _%>
Cypress.Commands.add('loginUsing', (username: string, password: string) => {
    cy.get('#account-menu')
      .click()
      .get(`.dropdown-menu`).then($dropDownMenu => {
          if ($dropDownMenu.get(0).firstElementChild.id === 'logout') {
            $dropDownMenu.get(0).firstElementChild.click();
            cy.get('#account-menu')
              .click()
              .get(`.dropdown-menu`).then($dropDownMenu2 => {
                  $dropDownMenu2.get(0).firstElementChild.click();
              });
          }
      });

    cy.get('#username').then($usernameElement => {
      if ($usernameElement.length) {
        cy.get('#username').type(username);
        cy.get('#password').type(password);
        cy.get('input[type=submit]').click();
      }
    });
});
<%_ } _%>

Cypress.Commands.add('loginWithAdmin', () => {
  return cy.loginUsing('admin', 'admin');
});

<%_ if (authenticationType === 'oauth2') { _%>
Cypress.Commands.add('logout', () => {
  cy.request({
    method: 'POST',
    url: '/<%= baseApi %>logout'
  }).then(response => {
      let logoutUrl = data.logoutUrl;
      // if Keycloak, uri has protocol/openid-connect/token
      if (logoutUrl.indexOf('/protocol') > -1) {
        logoutUrl = logoutUrl + '?redirect_uri=' + window.location.origin;
      } else {
        // Okta
        logoutUrl = logoutUrl + '?id_token_hint=' + data.idToken + '&post_logout_redirect_uri=' + window.location.origin;
      }
      cy.visit(logoutUrl);
  })
});
<%_ } else { _%>
Cypress.Commands.add('logout', () => {
  window.sessionStorage.removeItem('jhi-authenticationToken');
  window.localStorage.removeItem('jhi-authenticationToken');
});

Cypress.Commands.add('registerUserUsing', (login: string, email: string, password: string) => {
  return cy.request({
    method: 'POST',
    url: '/<%= baseApi %>register',
    body: {
      login,
      email,
      password
    }
  });
});

Cypress.Commands.add(
  'createAndActivateUserUsing',
  (login: string, email: string, password: string, firstName?: string, lastName?: string) => {
    cy.registerUserUsing(login, email, password).then(() => {
      cy.loginWithAdmin().then(result => {
        const auth = window.sessionStorage.getItem('jhi-authenticationToken');
        cy.request({
          method: 'GET',
          url: '/<%= baseApi %>users',
          auth: {
            bearer: auth
          }
        }).then(response => {
          response.body.forEach(user => {
            if (user.login === login) {
              cy.request({
                method: 'PUT',
                url: '/<%= baseApi %>users',
                body: {
                  ...user,
                  firstName,
                  lastName,
                  activated: true
                },
                auth: {
                  bearer: auth
                }
              });
            }
          });
        });
      });
      cy.logout();
    });
  }
);

Cypress.Commands.add('cleanUsers', () => {
  cy.loginWithAdmin().then(() => {
    const auth = window.sessionStorage.getItem('jhi-authenticationToken');
    cy.request({
      method: 'GET',
      url: `/<%= baseApi %>users`,
      auth: {
        bearer: auth
      }
    }).then(response => {
      response.body.forEach(user => {
        if (!['user', 'admin', 'system'].includes(user.login)) {
          cy.request({
            method: 'DELETE',
            url: `/<%= baseApi %>users/${user.login}`,
            auth: {
              bearer: auth
            }
          });
        }
      });
    });
  });
  cy.logout();
});
<%_ } _%>

<%_ if (authenticationType === 'oauth2') { _%>
declare global {
  namespace Cypress {
    interface Chainable<Subject> {
      logout(): void;
      loginUsing(username: string, password: string): Cypress.Chainable;
      loginWithAdmin(): Cypress.Chainable;
    }
  }
}
<%_ } else { _%>
declare global {
  namespace Cypress {
    interface Chainable<Subject> {
      logout(): void;
      loginUsing(username: string, password: string): Cypress.Chainable;
      loginWithAdmin(): Cypress.Chainable;
      cleanUsers(): Cypress.Chainable;
      registerUserUsing(login: string, email: string, password: string): Cypress.Chainable;
      createAndActivateUserUsing(login: string, email: string, password: string, firstName?: string, lastName?: string): Cypress.Chainable;
    }
  }
}
<%_ } _%>


// Convert this to a module instead of script (allows import/export)
export {};
