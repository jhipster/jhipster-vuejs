<%_ if (authenticationType !== 'oauth2') { _%>
  import SignInPage, {
  loginPageSelector,
  registerFormSelector,
  loginTitleSelector,
  usernameSelector,
  passwordSelector,
  submitSelector,
  loginAlertSelector }
<%_ } _%>
from '../../page-objects/signin-page';
import NavBarPage
<%_ if (authenticationType !== 'oauth2') { _%>
  , {
    headerSelector,
    headerTabsSelector,
    navbarSelector,
    adminMenuSelector,
    accountMenuSelector,
    loginSelector,
    logoutSelector,
    entityMenuSelector,
    registerSelector
  }
<%_ } _%>
from '../../page-objects/navbar-page';

describe('Log In', () => {

  beforeEach(() => {
    <%_ if (authenticationType !== 'oauth2') { _%>
    cy.logout();
    cy.visit('/');
    NavBarPage.getSignInPage();
    <%_ } else { _%>
    cy.visit('/')

    /** Keycloak */
    cy.kcLogin('user');

    /** Okta */
    // cy.oktaLogin();

    NavBarPage.getSignInPage()
    <%_ } _%>
  });

  <%_ if (authenticationType == 'oauth2') { _%>
  afterEach(() => {
    NavBarPage.autoSignOut()
    });
  <%_ } _%>


  <%_ if (authenticationType !== 'oauth2') { _%>
  it('should display login modal', () => {
    cy.get(loginPageSelector).find(loginTitleSelector);
    cy.get(loginPageSelector).find(usernameSelector);
    cy.get(loginPageSelector).find(passwordSelector);
    cy.get(loginPageSelector).find(submitSelector);
  });
  <%_ } _%>

  <%_ if (authenticationType !== 'oauth2') { _%>
  it('should fail to login with bad password', () => {
    SignInPage.autoSignInUsing('admin', 'wrong');
    cy.get(loginPageSelector)
      .find(loginTitleSelector)
      .should('exist');
    cy.get(loginPageSelector)
      .find(loginAlertSelector)
      .should('have.class', 'alert-danger');
  });
  <%_ } _%>

<%_ if(authenticationType == 'oauth2') { _%>
    it('should show user authenticated as an admin', () => {
        cy.get('.jh-card').contains('You are logged in as user "admin".')
    });
<%_ } _%>

<%_ if (authenticationType !== 'oauth2') { _%>
  it('should login with admin account', () => {
    SignInPage.autoSignInUsing('admin', 'admin');
    cy.get(loginPageSelector)
      .find(loginTitleSelector)
      .should('not.exist');
  });
<%_ } _%>
});
