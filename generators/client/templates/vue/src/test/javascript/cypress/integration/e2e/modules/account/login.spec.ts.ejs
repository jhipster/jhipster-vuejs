import SignInPage
<%_ if (authenticationType !== 'oauth2') { _%>
  , {
  loginPageSelector,
  registerFormSelector,
  loginTitleSelector,
  usernameSelector,
  passwordSelector,
  submitSelector,
  loginAlertSelector }
<%_ } _%>
from '../../page-objects/signin-page';
import NavBarPage
<%_ if (authenticationType !== 'oauth2') { _%>
  , {
    headerSelector,
    headerTabsSelector,
    navbarSelector,
    adminMenuSelector,
    accountMenuSelector,
    loginSelector,
    logoutSelector,
    entityMenuSelector,
    registerSelector
  }
<%_ } _%>
from '../../page-objects/navbar-page';

describe('Log In', () => {

  beforeEach(() => {
    <%_ if (authenticationType !== 'oauth2') { _%>
    cy.logout();
    cy.visit('/');
    NavBarPage.getSignInPage();
    <%_ } else { _%>
    cy.visit('/');
    <%_ } _%>
  });

  <%_ if (authenticationType !== 'oauth2') { _%>
  it('should display login modal', () => {
    cy.get(loginPageSelector).find(loginTitleSelector);
    cy.get(loginPageSelector).find(usernameSelector);
    cy.get(loginPageSelector).find(passwordSelector);
    cy.get(loginPageSelector).find(submitSelector);
  });
  <%_ } _%>

  it('should fail to login with bad password', () => {
<%_ if (authenticationType !== 'oauth2') { _%>
    SignInPage.autoSignInUsing('admin', 'wrong');
    cy.get(loginPageSelector)
      .find(loginTitleSelector)
      .should('exist');
    cy.get(loginPageSelector)
      .find(loginAlertSelector)
      .should('have.class', 'alert-danger');
<%_ } else {_%>
    NavBarPage.getSignInPage();
    SignInPage.loginWithOAuth('admin', 'wrong');
    cy.get('.alert-error').then($alert => {
      if ($alert.length) {
        // Keycloak
        expect($alert.get(0).innerText).to.equal('Invalid username or password.');
      } else {
        // Okta
        cy.get('.infobox-error').invoke('text').should('equal', 'Sign in failed!');
      }
    });
    cy.logout();
<%_ } _%>
  });

  it('should login with admin account', () => {
<%_ if (authenticationType !== 'oauth2') { _%>
    SignInPage.autoSignInUsing('admin', 'admin');
    cy.get(loginPageSelector)
      .find(loginTitleSelector)
      .should('not.exist');
<%_ } else {_%>
    NavBarPage.getSignInPage();
    SignInPage.loginWithOAuth('admin', 'admin');
    cy.get('.alert-success').should('exist');
    cy.logout();
<%_ } _%>
  });
});
