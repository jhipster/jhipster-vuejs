Cypress.Commands.add("kcLogin", (user: string) => {
    Cypress.log({name: "Login"});

    cy.fixture(`users/${user}`).then((userData) => {
        const authBaseUrl = Cypress.env("auth_base_url");
        const realm = Cypress.env("auth_realm");
        const client_id = Cypress.env("auth_client_id");

        cy.request({
            url: `${authBaseUrl}/realms/${realm}/protocol/openid-connect/auth`,
            followRedirect: false,
            qs: {
                scope: "openid",
                response_type: "code",
                approval_prompt: "auto",
                redirect_uri: Cypress.config("baseUrl"),
                client_id
            }
        })
            .then(response => {
                const html = document.createElement("html");
                html.innerHTML = response.body;

                const form = html.getElementsByTagName("form")[0];
                const url = form.action;

                return cy.request({
                    method: "POST",
                    url,
                    followRedirect: false,
                    form: true,
                    body: {
                        username: userData.username,
                        password: userData.password
                    }
                });
            })
            .then(response => {
                const code = getAuthCodeFromLocation(response.headers["location"]);

                cy.request({
                    method: "post",
                    url: `${authBaseUrl}/realms/${realm}/protocol/openid-connect/token`,
                    body: {
                        client_id,
                        redirect_uri: Cypress.config("baseUrl"),
                        code,
                        grant_type: "authorization_code"
                    },
                    form: true,
                    followRedirect: false
                }).its("body");
            });
    });
});

function getAuthCodeFromLocation(location: string): string | undefined {
    const url = new URL(location);
    const params = url.search.substring(1).split("&");
    for (const param of params) {
        const [key, value] = param.split("=");
        if (key === "code") {
            return value;
        }
    }
}

Cypress.Commands.add('kcLogout', () => {
    const kcRoot: string = Cypress.env("auth_base_url");
    const kcRealm: string = Cypress.env("auth_realm");
    const kcRedirectUri: string = Cypress.env("redirect_uri");
    return cy.request({
        url: `${kcRoot}/realms/${kcRealm}/protocol/openid-connect/logout`,
        qs: {
            redirect_uri: kcRedirectUri
        }
    });
});


Cypress.Commands.add('resetDb', () => {
    cy.clearCookies({domain: null})
    cy.clearLocalStorage()
});


declare global {
    namespace Cypress {
        interface Chainable<Subject> {
            kcLogout(): void;

            kcLogin(user: string): Cypress.Chainable;

            resetDb(): void
        }
    }
}

// Convert this to a module instead of script (allows import/export)
export {};
