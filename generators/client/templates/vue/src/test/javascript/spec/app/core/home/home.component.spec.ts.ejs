import { createLocalVue, shallowMount, Wrapper } from '@vue/test-utils';
import Home from '@/core/home/home.vue';
import HomeClass from '@/core/home/home.component';
import * as config from '@/shared/config/config';

const localVue = createLocalVue();
config.initVueApp(localVue);
const store = config.initVueXStore(localVue);
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>
localVue.component('router-link', {});

describe('Home', () => {
  let home: HomeClass;
  let wrapper: Wrapper<HomeClass>;
  <%_ if (authenticationType !== 'oauth2') { _%>
  const loginModalService = {openLogin: jest.fn()};
  <%_ } else { %>
  const loginService = {login: jest.fn()};
  <%_ } %>

  beforeEach(() => {
    wrapper = shallowMount<HomeClass>(Home, {
      <%_ if (enableTranslation) { _%>
      i18n,
      <%_ } _%>
      store,
      localVue,
      provide: {
        <%_ if (authenticationType !== 'oauth2') { _%>
        loginModalService: () => loginModalService
        <%_ } else { %>
        loginService: () => loginService
        <%_ } %>
      }
    });
    home = wrapper.vm;
  });

  it('should be a Vue instance', () => {
    expect(wrapper.isVueInstance()).toBeTruthy();
  });

  it('should not have user data set', () => {
    expect(home.authenticated).toBeFalsy();
    expect(home.username).toBe('');
  });

  it('should have user data set after authentication', () => {
    store.commit('authenticated', {login: 'test'});

    expect(home.authenticated).toBeTruthy();
    expect(home.username).toBe('test');
  });

  it('should use login service', () => {
    home.openLogin();

    <%_ if (authenticationType !== 'oauth2') { _%>
    expect(loginModalService.openLogin).toHaveBeenCalled();
    <%_ } else { %>
    expect(loginService.login).toHaveBeenCalled();
    <%_ } %>
  });
});
