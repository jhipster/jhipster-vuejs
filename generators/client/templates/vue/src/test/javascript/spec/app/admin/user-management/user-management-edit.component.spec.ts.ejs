import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils';
import axios from 'axios';
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';

import * as config from '@/shared/config';
import UserManagementEdit from '@/components/admin/user-management/user-management-edit.vue';
import UserManagementEditClass from '@/components/admin/user-management/user-management-edit.component';
import UserManagementService from '@/components/admin/user-management/user-management.service';

const localVue = createLocalVue();
const mockedAxios: any = axios;

config.initVueApp(localVue);
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>
const store = config.initVueXStore(localVue);
localVue.component('font-awesome-icon', FontAwesomeIcon);

jest.mock('axios', () => ({
  get: jest.fn(),
  post: jest.fn(),
  put: jest.fn()
}));

describe('UserManagementEdit Component', () => {
  let wrapper: Wrapper<UserManagementEditClass>;
  let userManagementEdit: UserManagementEditClass;

  beforeEach(() => {
    wrapper = shallowMount<UserManagementEditClass>(UserManagementEdit, { store, <% if (enableTranslation) { %>i18n, <% } %>localVue, provide: { userService: () => new UserManagementService() } });
    userManagementEdit = wrapper.vm;
  });

  it('should be a Vue instance', () => {
    expect(wrapper.isVueInstance()).toBeTruthy();
  });

  describe('OnInit', () => {
    it('Should load authorities and language on init', async () => {
      // GIVEN
      mockedAxios.get.mockReturnValue(Promise.resolve({}));

      // WHEN
      userManagementEdit.init(1);
      await userManagementEdit.$nextTick();

      // THEN
      expect(mockedAxios.get).toHaveBeenCalledWith(`api/users/1`);
      expect(mockedAxios.get).toHaveBeenCalledWith(`api/users/authorities`);
    });
  });

  describe('save', () => {
    it('Should call update service on save for existing user', async () => {
      // GIVEN
      mockedAxios.put.mockReturnValue(Promise.resolve({}));
      userManagementEdit.userAccount = { id: 1 };

      // WHEN
      userManagementEdit.save();
      await userManagementEdit.$nextTick();

      // THEN
      expect(mockedAxios.put).toHaveBeenCalledWith(`api/users`, { id: 1 });
      expect(userManagementEdit.isSaving).toEqual(false);
    });

    it('Should call create service on save for new user', async () => {
      // GIVEN
      mockedAxios.post.mockReturnValue(Promise.resolve({}));
      userManagementEdit.userAccount = {};

      // WHEN
      userManagementEdit.save();
      await userManagementEdit.$nextTick();

      // THEN
      expect(mockedAxios.post).toHaveBeenCalledWith(`api/users`, {<% if (!enableTranslation) { %>langKey: 'en'<% } %>});
      expect(userManagementEdit.isSaving).toEqual(false);
    });
  });
});
